package com.eohi.haixin.ui.work.quality.unqualified

import android.Manifest
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.net.Uri
import android.text.TextUtils
import androidx.recyclerview.widget.LinearLayoutManager
import com.eohi.haixin.R
import com.eohi.haixin.base.BaseActivity
import com.eohi.haixin.databinding.ActivityUnqualifiedReportBinding
import com.eohi.haixin.ui.work.model.BlxxBean
import com.eohi.haixin.ui.work.model.Items
import com.eohi.haixin.ui.work.model.UnQualifiedPostModel
import com.eohi.haixin.ui.work.quality.incoming.IncomingCheckActivity
import com.eohi.haixin.ui.work.quality.unqualified.adapter.MxAdapter
import com.eohi.haixin.utils.Constant.REQUEST_CODE_SCAN_03
import com.eohi.haixin.utils.Constant.SCANACTION
import com.eohi.haixin.utils.DateUtil
import com.eohi.haixin.utils.Extensions.asColor
import com.eohi.haixin.utils.Extensions.showAlertDialog
import com.eohi.haixin.utils.Extensions.showShortToast
import com.eohi.haixin.utils.StatusBarUtil
import com.eohi.haixin.view.DialogEqu
import com.eohi.haixin.view.ListDialog
import com.eohi.haixin.widget.clicks
import com.example.qrcode.Constant
import com.example.qrcode.ScannerActivity
import pub.devrel.easypermissions.AfterPermissionGranted
import pub.devrel.easypermissions.EasyPermissions

/*
* 不合格品登记
* */
class UnQualifiedReportActivity :
    BaseActivity<UnQualifiedReportViewModel, ActivityUnqualifiedReportBinding>(),
    EasyPermissions.PermissionCallbacks, MxAdapter.DeleteListener, MxAdapter.BlyyListener,
    MxAdapter.ScryListener, MxAdapter.SlListener {

    private var cardno = ""
    private var equNO = ""
    private var gxno = ""//工序号
    private var lzkkh = ""//流转卡卡号
    private var jgdybh = ""//加工单元
    private lateinit var dialogGx: ListDialog
    private lateinit var listGx: ArrayList<String>
    private lateinit var listGxH: ArrayList<String>
    private lateinit var dialogPerson: ListDialog
    private lateinit var listPerson: ArrayList<String>
    private lateinit var listPersonBh: ArrayList<String>
    private lateinit var listEquipment: ArrayList<String>
    private lateinit var listEquipmentshow: ArrayList<String>
    private lateinit var listSbbh: ArrayList<String>
    private lateinit var dialogEquipment: DialogEqu
    private lateinit var dialogJgdy: ListDialog
    private lateinit var listJgdy: ArrayList<String>
    private lateinit var listJgdybh: ArrayList<String>
    private var scrid = "0" //生产人员工号
    private var scr = "" //生产人姓名
    private var blxxList = ArrayList<BlxxBean>()
    private var mxList = ArrayList<Items>()
    private lateinit var mxAdapter: MxAdapter
    private lateinit var hashMap: HashMap<String, String>
    private var ryPosition = 0
    private var zs = 0
    private var temp = 0
    private var slPosition = 0

    companion object {
        const val REQUEST_RY = 0x1111
    }

    override fun isNeedEventBus(): Boolean {
        return false
    }

    override fun onBarcodeEvent(result: String) {
        v.tvLzkbh.text = result
        cardno = result.trim { it <= ' ' }
        vm.getLzkDetail(
            result.trim { it <= ' ' }
        )
    }

    override fun initView() {
        StatusBarUtil.setColor(this, R.color.white.asColor())
        StatusBarUtil.darkMode(this, true)
        v.tvCzy.text = username
        v.tvRq.text = DateUtil.audioTime
        vm.getBlxx()
        vm.getPerson(companyNo, "")
    }

    override fun initClick() {
        v.ivBack clicks {
            finish()
        }
        v.tvLzkbh clicks {
            checkCameraPermissions(1)
        }
        v.btnScgx clicks {
            if (TextUtils.isEmpty(cardno)) {
                showShortToast("请扫码获取流转卡信息")
            } else {
                vm.getGx(cardno)
            }
        }
        v.btnScsb clicks {
            vm.getSblist(companyNo, accout)
        }
        v.btnJgdy.clicks {
            if (TextUtils.isEmpty(cardno)) {
                showShortToast("请扫码获取流转卡信息")
            } else {
                vm.getJgdy(v.tvLzkbh.text.toString(), gxno, equNO)
            }
        }
        v.btnPost clicks {
            when {
                TextUtils.isEmpty(v.tvLzkbh.text.toString()) -> {
                    showShortToast("请扫码获取流转卡信息")
                }
                TextUtils.isEmpty(v.tvScgx.text.toString()) -> {
                    showShortToast("请选择生产工序")
                }
                TextUtils.isEmpty(v.tvJgdy.text.toString()) -> {
                    showShortToast("请选择加工单元")
                }
                TextUtils.isEmpty(v.tvScsb.text.toString()) -> {
                    showShortToast("请选择生产设备")
                }
                mxList.size > 0 && !checkItems() -> {

                }
                zs == 0 -> {
                    showShortToast("不合格数量不能为0")
                }
                else -> {
                    val unQualifiedPostModel = UnQualifiedPostModel()
                    unQualifiedPostModel.gsh = companyNo
                    unQualifiedPostModel.jgdybh = jgdybh
                    unQualifiedPostModel.jgdymc = v.tvJgdy.text.toString()
                    unQualifiedPostModel.lzkkh = lzkkh
                    unQualifiedPostModel.sbbh = equNO
                    unQualifiedPostModel.sbmc = v.tvScsb.text.toString()
                    unQualifiedPostModel.bhgzsl = v.etBhgsl.text.toString().toInt()
                    unQualifiedPostModel.gxbh = gxno
                    unQualifiedPostModel.gxmc = v.tvScgx.text.toString()
                    unQualifiedPostModel.scrid = scrid
                    unQualifiedPostModel.scr = v.tvScry.text.toString()
                    unQualifiedPostModel.cjrid = accout
                    unQualifiedPostModel.cjr = username
                    unQualifiedPostModel.items = mxList
                    vm.post(unQualifiedPostModel)
                }
            }
        }
        v.btnScry clicks {
            dialogPerson.show()
            dialogPerson.refreshList(listPerson)
            dialogPerson.hideSearch()
        }
        v.ivScryScan.clicks {
            checkCameraPermissions(REQUEST_CODE_SCAN_03)
        }
        v.btnAdd clicks {
            val item = Items()
            if (v.tvScry.text.toString() != "") {
                item.scrid = scrid
                item.scr = scr
            }
            mxList.add(item)
            mxAdapter.notifyDataSetChanged()
        }
    }

    private fun checkItems(): Boolean {
        mxList.forEachIndexed { index, items ->
            if (items.blyy == "") {
                showShortToast("请选择第${index + 1}行的不良原因")
                return false
            }
            if (items.scr == "") {
                showShortToast("请扫码第${index + 1}行的生产人员")
                return false
            }
        }
        return true
    }

    private fun initMap() {
        hashMap["companycode"] = companyNo
        hashMap["equname"] = ""
        hashMap["userid"] = accout
    }

    private fun getAll() {
        initMap()
        vm.getAllEquipmentList(hashMap)
    }

    override fun initData() {
        listGx = ArrayList()
        listGxH = ArrayList()
        listPerson = ArrayList()
        listPersonBh = ArrayList()
        listJgdy = ArrayList()
        listJgdybh = ArrayList()
        listSbbh = ArrayList()
        listEquipment = ArrayList()
        listEquipmentshow = ArrayList()
        hashMap = HashMap()
        mxList = ArrayList()
        mxAdapter = MxAdapter(this, mxList)
        mxAdapter.setDeleteListener(this)
        mxAdapter.setBlyyListener(this)
        mxAdapter.setScryListener(this)
        mxAdapter.setSlListener(this)
        v.rvMx.layoutManager = LinearLayoutManager(this)
        v.rvMx.adapter = mxAdapter
        dialogEquipment = DialogEqu(this, listEquipmentshow, object : DialogEqu.MyListener {
            override fun refreshActivity(position: Int) {
                v.tvScsb.text = listEquipment[position]
                equNO = listSbbh[position]
                v.tvJgdy.text = listJgdy[position]
                jgdybh = listJgdybh[position] ?: ""
            }
        })
        dialogEquipment.setOnEqu {
            vm.getSblist(companyNo, accout)
        }
        dialogEquipment.setOnAllequ {
            getAll()
        }
        dialogGx = ListDialog(this, "生产工序", listGx, object : ListDialog.MyListener {
            override fun refreshActivity(position: Int) {
                v.tvScgx.text = listGx[position]
                gxno = listGxH[position]
            }
        })
        dialogJgdy = ListDialog(this, "加工单元", listJgdy, object : ListDialog.MyListener {
            override fun refreshActivity(position: Int) {
                v.tvJgdy.text = listJgdy[position]
                jgdybh = listJgdybh[position]
            }
        })
        dialogPerson = ListDialog(this, "人员选择", listPerson, object : ListDialog.MyListener {
            override fun refreshActivity(position: Int) {
                v.tvScry.text = listPerson[position]
                scrid = listPersonBh[position]
                scr = listPerson[position].split("/")[1]
            }
        })
    }

    override fun initVM() {
        vm.jgdylist.observe(this) {
            listJgdy.clear()
            listJgdybh.clear()
            it.onEach {
                listJgdybh.add(it.jgdybh)
                listJgdy.add(it.jgdymc)
            }
            dialogJgdy.show()
            dialogJgdy.refreshList(listJgdy)
        }
        vm.perPerson.observe(this) {
            if (it.isNotEmpty()) {
                mxList[ryPosition].scrid = it[0].ygbh
                mxList[ryPosition].scr = it[0].ygxm
                mxAdapter.notifyDataSetChanged()
            }
        }
        vm.person.observe(this) {
            if (it.isNotEmpty()) {
                v.tvScry.text = it[0].ygbh + "/" + it[0].ygxm
                scrid = it[0].ygbh
                scr = it[0].ygxm
            }
        }
        vm.sblist.observe(this) { list ->
            if (list.isNotEmpty()) {
                listEquipment.clear()
                listEquipmentshow.clear()
                listSbbh.clear()
                listJgdy.clear()
                listJgdybh.clear()
                list.onEach {
                    listSbbh.add(it.sbbh)
                    listEquipment.add(it.sbmc)
                    listEquipmentshow.add(it.sbbh + "/" + it.sbmc)
                    listJgdy.add(it.scxmc)
                    listJgdybh.add(it.scxbh)
                }
                dialogEquipment.show()
                dialogEquipment.refreshList(listEquipmentshow)

            }
        }
        vm.equipmentList.observe(this) { list ->
            if (list.isNotEmpty()) {
                listEquipment.clear()
                listEquipmentshow.clear()
                listSbbh.clear()
                listJgdy.clear()
                listJgdybh.clear()
                list.onEach {
                    listSbbh.add(it.sbbh)
                    listEquipment.add(it.sbmc)
                    listEquipmentshow.add(it.sbbh + "/" + it.sbmc)
                    listJgdy.add(it.scxmc)
                    listJgdybh.add(it.scxbh)
                }
                dialogEquipment.refreshList(listEquipmentshow)
            }
        }
        vm.postResult.observe(this) {
            showShortToast("登记成功")
            finish()
        }
        vm.personResult.observe(this) { it ->
            listPerson.clear()
            listPersonBh.clear()
            it.onEach {
                listPerson.add(it.ygbh + "/" + it.ygxm)
                listPersonBh.add(it.ygbh)
            }
        }
        vm.gxResult.observe(this) { it ->
            listGx.clear()
            it.onEach {
                listGx.add(it.gxms)
                listGxH.add(it.gxh)
            }
            dialogGx.show()
            dialogGx.refreshList(listGx)
            dialogGx.hideSearch()
        }
        vm.blxxResult.observe(this) {
            blxxList.addAll(it)
        }
        vm.lzkDetailResult.observe(this) {
            it[0].apply {
                v.tvCpmc.text = wpmc
                v.tvCpth.text = th
                v.tvXqsl.text = bzs
                this@UnQualifiedReportActivity.lzkkh = lzkkh
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (resultCode == RESULT_OK && data != null) {
            when (requestCode) {
                1 -> {
                    v.tvLzkbh.text = data.getStringExtra(Constant.EXTRA_RESULT_CONTENT)!!
                    cardno = data.getStringExtra(Constant.EXTRA_RESULT_CONTENT)!!
                    vm.getLzkDetail(
                        data.getStringExtra(Constant.EXTRA_RESULT_CONTENT)!!
                    )
                }
                REQUEST_CODE_SCAN_03 -> {
                    val result =
                        data.getStringExtra(Constant.EXTRA_RESULT_CONTENT)!!.trim { it <= ' ' }
                    scrid = result
                    vm.findPerson(companyNo, result)
                }
                REQUEST_RY -> {
                    val result =
                        data.getStringExtra(Constant.EXTRA_RESULT_CONTENT)!!.trim { it <= ' ' }
                    vm.findPerPerson(companyNo, result)
                }
            }
        }
    }

    @AfterPermissionGranted(IncomingCheckActivity.RC_CAMERA)
    private fun checkCameraPermissions(code: Int) {
        val perms = arrayOf(Manifest.permission.CAMERA)
        if (EasyPermissions.hasPermissions(this, *perms)) { //有权限
            val intent = Intent(this, ScannerActivity::class.java)
            intent.putExtra(Constant.EXTRA_IS_ENABLE_SCAN_FROM_PIC, true)
            intent.putExtra(Constant.EXTRA_SCANNER_FRAME_WIDTH, window.decorView.width / 2)
            intent.putExtra(Constant.EXTRA_SCANNER_FRAME_HEIGHT, window.decorView.width / 2)
            startActivityForResult(intent, code)
        } else {
            // Do not have permissions, request them now
            EasyPermissions.requestPermissions(
                this, getString(R.string.permission_camera), IncomingCheckActivity.RC_CAMERA, *perms
            )
        }
    }

    override fun onPermissionsGranted(requestCode: Int, perms: MutableList<String>) {
        val intent = Intent(this, ScannerActivity::class.java)
        intent.putExtra(Constant.EXTRA_IS_ENABLE_SCAN_FROM_PIC, true)
        intent.putExtra(Constant.EXTRA_SCANNER_FRAME_WIDTH, window.decorView.width / 2)
        intent.putExtra(Constant.EXTRA_SCANNER_FRAME_HEIGHT, window.decorView.width / 2)
        startActivityForResult(intent, 1)
    }

    override fun onPermissionsDenied(requestCode: Int, perms: MutableList<String>) {
        showAlertDialog("确定", "重要提示", "请去设置里开启权限！") {
            val intent = Intent("android.settings.APPLICATION_DETAILS_SETTINGS")
            intent.data = Uri.fromParts("package", packageName, null)
            startActivity(intent)
        }
    }

    override fun onResume() {
        // 注册广播接收器
        val intentFilter = IntentFilter(SCANACTION)
        intentFilter.priority = Int.MAX_VALUE
        registerReceiver(scanReceiver, intentFilter)
        super.onResume()
    }

    var scanReceiver: BroadcastReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            if (intent.action == SCANACTION) {
                val result = intent.getStringExtra("scannerdata")!!.toString().trim { it <= ' ' }
                v.tvLzkbh.text = result
                cardno = result
                vm.getLzkDetail(
                    result
                )
            }
        }
    }

    override fun onPause() {
        //取消广播注册
        unregisterReceiver(scanReceiver)
        super.onPause()
    }

    //删除指定位置数据
    override fun delete(position: Int) {
        showAlertDialog("确定", "重要提示", "是否删除") {
            zs -= mxList[position].blsl
            v.etBhgsl.setText(zs.toString())
            mxList.removeAt(position)
            mxAdapter.notifyDataSetChanged()
        }
    }

    override fun setBlyy(position: Int) {
        val tempList = ArrayList<String>()
        blxxList.forEach {
            tempList.add(it.XXSM)
        }
        val dialog =
            ListDialog(this, "不良现象", tempList, object : ListDialog.MyListener {
                override fun refreshActivity(i: Int) {
                    mxList[position].blbm = blxxList[i].XXBM
                    mxList[position].blyy = blxxList[i].XXSM
                    mxAdapter.notifyDataSetChanged()
                }
            })
        dialog.show()
        dialog.hideSearch()
    }

    override fun setScry(position: Int) {
        ryPosition = position
        checkCameraPermissions(REQUEST_RY)
    }

    override fun setSl(position: Int, s: String) {
        if (slPosition != position) {
            slPosition = position
            temp = 0
        }
        mxList[position].blsl = s.toInt()
        zs -= temp
        zs += s.toInt()
        temp = s.toInt()
        v.etBhgsl.setText(zs.toString())
    }

}