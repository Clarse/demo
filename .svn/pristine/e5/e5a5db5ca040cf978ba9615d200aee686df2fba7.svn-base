package com.eohi.haixin.ui.work.purchasein

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.viewModelScope
import com.eohi.haixin.api.error.ErrorResult
import com.eohi.haixin.api.error.ErrorUtil
import com.eohi.haixin.base.BaseViewModel
import com.eohi.haixin.response.BaseResModel
import com.eohi.haixin.ui.main.model.OrderNumberModel
import com.eohi.haixin.ui.main.model.PointResult
import com.eohi.haixin.ui.main.model.WarehouseInfo
import com.eohi.haixin.ui.work.model.*
import com.eohi.haixin.utils.DateUtil.data
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

/**
 * @author zhaoli.Wang
 * @description:
 * @date :2021/3/12 10:07
 */
class InstorageDetailViewModel :BaseViewModel() {
    var mrkresult = MutableLiveData<BaseResModel<SubmitResult>>()
    var agvtype = MutableLiveData<BaseResModel<AgvLocationType>>()
    var wjresult = MutableLiveData<BaseResModel<SubmitResult>>()
    var agvresult = MutableLiveData<BaseResModel<SubmitResult>>()
    //五金仓库，直接提交
    fun getOrderNo(dj:String,model:InstorageModel ){
        viewModelScope.launch {
            try {
                showLoading()
                val resultmodel=withContext(Dispatchers.IO) {httpUtil.getOrderNo(dj)}
                if(resultmodel.code ==1000){
                    model.swh = resultmodel.data!!.list!![0].DJH!!
                    val rkresult=  withContext(Dispatchers.IO) {httpUtil.inStorage(model)}
                    wjresult.value = rkresult
                }else{
                    showError(ErrorResult(resultmodel.code, resultmodel.msg, true))
                }
            }catch (e:Exception){
                val errorResult = ErrorUtil.getError(e)
                errorResult.show = true
                showError(errorResult)
            } finally {//请求结束
                dismissLoading()
            }

        }

    }

    //Agv仓库提交
    fun  getOrderNoAgvSubmit(dj:String,model:InstorageModel){

        viewModelScope.launch {
            showLoading()
            val resultmodel=withContext(Dispatchers.IO) {httpUtil.getOrderNo(dj)}
            if(resultmodel.code ==1000){
                model.swh = resultmodel.data!!.list!![0].DJH!!
                 val rkresult=withContext(Dispatchers.IO) {httpUtil.inStorage(model)}
                 mrkresult.value =rkresult
                 dismissLoading()
            }else{
                showError(ErrorResult(resultmodel.code, resultmodel.msg, true))
            }


        }
    }

    //agv任务类型
    fun  subAgvType(YWLXM:String){
        viewModelScope.launch {
            val agvModel=withContext(Dispatchers.IO) {httpUtil.getPointgetType(YWLXM)}
            agvtype.value = agvModel
        }

    }

    //agv任务提交
    fun agvTaskadd(agvmodel:AgvSubmitModel){
        viewModelScope.launch {
            agvresult.value=  withContext(Dispatchers.IO){httpUtil.addAGV(agvmodel)}
        }
    }





}